
 #include <stdio.h>
#include <stdlib.h>
#include <string.h>


int compareDesc(const void *a, const void *b) {
    return strcmp(*(const char **)b, *(const char **)a);
}

void processSpecialBinaryString(char *s, char *result, int start, int end) {
    if (start >= end) {
        return;
    }

    char **substrings = (char **)malloc((end - start) * sizeof(char *));
    int count = 0, balance = 0, last = start;
    int substrCount = 0;

    
    for (int i = start; i < end; i++) {
        if (s[i] == '1') {
            balance++;
        } else {
            balance--;
        }

        
        if (balance == 0) {
            substrings[substrCount] = (char *)malloc((i - last + 2) * sizeof(char));
            strncpy(substrings[substrCount], &s[last], i - last + 1);
            substrings[substrCount][i - last + 1] = '\0';

            
            processSpecialBinaryString(substrings[substrCount], substrings[substrCount], 1, i - last);
            substrCount++;
            last = i + 1;
        }
    }

  r
    qsort(substrings, substrCount, sizeof(char *), compareDesc);

 
    for (int i = 0; i < substrCount; i++) {
        strcat(result, substrings[i]);
        free(substrings[i]);
    }

    free(substrings);
}

char *makeLargestSpecial(char *s) {
    int len = strlen(s);
    char *result = (char *)malloc((len + 1) * sizeof(char));
    result[0] = '\0';

    processSpecialBinaryString(s, result, 0, len);

    return result;
}

int main() {
    char s[100];

    printf("Enter the special binary string: ");
    scanf("%s", s);

    char *result = makeLargestSpecial(s);
    printf("Largest lexicographical special binary string: %s\n", result);

    free(result);
    return 0;
}
